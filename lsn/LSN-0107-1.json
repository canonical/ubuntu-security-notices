{
  "action": "",
  "cves": [
    "CVE-2024-38630",
    "CVE-2024-27398",
    "CVE-2024-26923",
    "CVE-2024-26960",
    "CVE-2024-26921"
  ],
  "description": "In the Linux kernel, the following vulnerability has been\nresolved: inet: inet_defrag: prevent sk release while still in use\nip_local_out() and other functions can pass skb->sk as function argument.\nIf the skb is a fragment and reassembly happens before such function call\nreturns, the sk must not be released. This affects skb fragments\nreassembled via netfilter or similar modules, e.g. openvswitch or ct_act.c,\nwhen run as part of tx pipeline. Eric Dumazet made an initial analysis of\nthis bug. Quoting Eric: Calling ip_defrag() in output path is also implying\nskb_orphan(), which is buggy because output path relies on sk not\ndisappearing. A relevant old patch about the issue was : 8282f27449bf\n('inet: frag: Always orphan skbs inside ip_defrag()') [..\nnet/ipv4/ip_output.c depends on skb->sk being set, and probably to an inet\nsocket, not an arbitrary one. If we orphan the packet in ipvlan, then\ndownstream things like FQ packet scheduler will not work properly. We need\nto change ip_defrag() to only use skb_orphan() when really needed, ie\nwhenever frag_list is going to be used. Eric suggested to stash sk in\nfragment queue and made an initial patch. However there is a problem with\nthis: If skb is refragmented again right after, ip_do_fragment() will copy\nhead->sk to the new fragments, and sets up destructor to sock_wfree. IOW,\nwe have no choice but to fix up sk_wmem accouting to reflect the fully\nreassembled skb, else wmem will underflow. This change moves the orphan\ndown into the core, to last possible moment. As ip_defrag_offset is aliased\nwith sk_buff->sk member, we must move the offset into the FRAG_CB, else\nskb->sk gets clobbered. This allows to delay the orphaning long enough to\nlearn if the skb has to be queued or if the skb is completing the reasm\nqueue. In the former case, things work as before, skb is orphaned. This is\nsafe because skb gets queued/stolen and won't continue past reasm engine.\nIn the latter case, we will steal the skb->sk reference, reattach it to the\nhead skb, and fix up wmem accouting when inet_frag inflates truesize.)(CVE-2024-26921)\n\nIn the Linux kernel, the following vulnerability has been\nresolved: af_unix: Fix garbage collector racing against connect() Garbage\ncollector does not take into account the risk of embryo getting enqueued\nduring the garbage collection. If such embryo has a peer that carries\nSCM_RIGHTS, two consecutive passes of scan_children() may see a different\nset of children. Leading to an incorrectly elevated inflight count, and\nthen a dangling pointer within the gc_inflight_list. sockets are\nAF_UNIX/SOCK_STREAM S is an unconnected socket L is a listening in-flight\nsocket bound to addr, not in fdtable V's fd will be passed via sendmsg(),\ngets inflight count bumped connect(S, addr) sendmsg(S, [V]); close(V)\n__unix_gc() ---------------- ------------------------- ----------- NS =\nunix_create1() skb1 = sock_wmalloc(NS) L = unix_find_other(addr)\nunix_state_lock(L) unix_peer(S) = NS // V count=1 inflight=0 NS =\nunix_peer(S) skb2 = sock_alloc() skb_queue_tail(NS, skb2[V]) // V became\nin-flight // V count=2 inflight=1 close(V) // V count=1 inflight=1 // GC\ncandidate condition met for u in gc_inflight_list: if (total_refs ==\ninflight_refs) add u to gc_candidates // gc_candidates={L, V} for u in\ngc_candidates: scan_children(u, dec_inflight) // embryo (skb1) was not //\nreachable from L yet, so V's // inflight remains unchanged\n__skb_queue_tail(L, skb1) unix_state_unlock(L) for u in gc_candidates: if\n(u.inflight) scan_children(u, inc_inflight_move_tail) // V count=1\ninflight=2 (!) If there is a GC-candidate listening socket, lock/unlock its\nstate. This makes GC wait until the end of any ongoing connect() to that\nsocket. After flipping the lock, a possibly SCM-laden embryo is already\nenqueued. And if there is another embryo coming, it can not possibly carry\nSCM_RIGHTS. At this point, unix_inflight() can not happen because\nunix_gc_lock is already taken. Inflight graph remains unaffected.)(CVE-2024-26923)\n\nIn the Linux kernel, the following vulnerability has been\nresolved: mm: swap: fix race between free_swap_and_cache() and swapoff()\nThere was previously a theoretical window where swapoff() could run and\nteardown a swap_info_struct while a call to free_swap_and_cache() was\nrunning in another thread. This could cause, amongst other bad\npossibilities, swap_page_trans_huge_swapped() (called by\nfree_swap_and_cache()) to access the freed memory for swap_map. This is a\ntheoretical problem and I haven't been able to provoke it from a test case.\nBut there has been agreement based on code review that this is possible\n(see link below). Fix it by using get_swap_device()/put_swap_device(),\nwhich will stall swapoff(). There was an extra check in _swap_info_get() to\nconfirm that the swap entry was not free. This isn't present in\nget_swap_device() because it doesn't make sense in general due to the race\nbetween getting the reference and swapoff. So I've added an equivalent\ncheck directly in free_swap_and_cache(). Details of how to provoke one\npossible issue (thanks to David Hildenbrand for deriving this): --8<-----\n__swap_entry_free() might be the last user and result in 'count ==\nSWAP_HAS_CACHE'. swapoff->try_to_unuse() will stop as soon as soon as\nsi->inuse_pages==0. So the question is: could someone reclaim the folio and\nturn si->inuse_pages==0, before we completed\nswap_page_trans_huge_swapped(). Imagine the following: 2 MiB folio in the\nswapcache. Only 2 subpages are still references by swap entries. Process 1\nstill references subpage 0 via swap entry. Process 2 still references\nsubpage 1 via swap entry. Process 1 quits. Calls free_swap_and_cache(). ->\ncount == SWAP_HAS_CACHE [then, preempted in the hypervisor etc.] Process 2\nquits. Calls free_swap_and_cache(). -> count == SWAP_HAS_CACHE Process 2\ngoes ahead, passes swap_page_trans_huge_swapped(), and calls\n__try_to_reclaim_swap().\n__try_to_reclaim_swap()->folio_free_swap()->delete_from_swap_cache()->\nput_swap_folio()->free_swap_slot()->swapcache_free_entries()->\nswap_entry_free()->swap_range_free()-> ... WRITE_ONCE(si->inuse_pages,\nsi->inuse_pages - nr_entries); What stops swapoff to succeed after process\n2 reclaimed the swap cache but before process1 finished its call to\nswap_page_trans_huge_swapped()? --8<-----)(CVE-2024-26960)\n\nIn the Linux kernel, the following vulnerability has been\nresolved: Bluetooth: Fix use-after-free bugs caused by sco_sock_timeout\nWhen the sco connection is established and then, the sco socket is\nreleasing, timeout_work will be scheduled to judge whether the sco\ndisconnection is timeout. The sock will be deallocated later, but it is\ndereferenced again in sco_sock_timeout. As a result, the use-after-free\nbugs will happen. The root cause is shown below: Cleanup Thread \n Worker\nThread sco_sock_release \n sco_sock_close \n __sco_sock_close \n\nsco_sock_set_timer \n schedule_delayed_work \n sco_sock_kill \n (wait a time)\nsock_put(sk) //FREE \n sco_sock_timeout \n sock_hold(sk) //USE The KASAN\nreport triggered by POC is shown below: [ 95.890016\n================================================================== [\n95.890496] BUG: KASAN: slab-use-after-free in sco_sock_timeout+0x5e/0x1c0 [\n95.890755] Write of size 4 at addr ffff88800c388080 by task kworker/0:0/7\n... [ 95.890755] Workqueue: events sco_sock_timeout [ 95.890755] Call\nTrace: [ 95.890755] <TASK> [ 95.890755] dump_stack_lvl+0x45/0x110 [\n95.890755] print_address_description+0x78/0x390 [ 95.890755\nprint_report+0x11b/0x250 [ 95.890755] ? __virt_addr_valid+0xbe/0xf0 [\n95.890755] ? sco_sock_timeout+0x5e/0x1c0 [ 95.890755\nkasan_report+0x139/0x170 [ 95.890755] ? update_load_avg+0xe5/0x9f0 [\n95.890755] ? sco_sock_timeout+0x5e/0x1c0 [ 95.890755\nkasan_check_range+0x2c3/0x2e0 [ 95.890755] sco_sock_timeout+0x5e/0x1c0 [\n95.890755] process_one_work+0x561/0xc50 [ 95.890755\nworker_thread+0xab2/0x13c0 [ 95.890755] ? pr_cont_work+0x490/0x490 [\n95.890755] kthread+0x279/0x300 [ 95.890755] ? pr_cont_work+0x490/0x490 [\n95.890755] ? kthread_blkcg+0xa0/0xa0 [ 95.890755] ret_from_fork+0x34/0x60 [\n95.890755] ? kthread_blkcg+0xa0/0xa0 [ 95.890755\nret_from_fork_asm+0x11/0x20 [ 95.890755] </TASK> [ 95.890755] [ 95.890755\nAllocated by task 506: [ 95.890755] kasan_save_track+0x3f/0x70 [ 95.890755\n__kasan_kmalloc+0x86/0x90 [ 95.890755] __kmalloc+0x17f/0x360 [ 95.890755\nsk_prot_alloc+0xe1/0x1a0 [ 95.890755] sk_alloc+0x31/0x4e0 [ 95.890755\nbt_sock_alloc+0x2b/0x2a0 [ 95.890755] sco_sock_create+0xad/0x320 [\n95.890755] bt_sock_create+0x145/0x320 [ 95.890755\n__sock_create+0x2e1/0x650 [ 95.890755] __sys_socket+0xd0/0x280 [ 95.890755\n__x64_sys_socket+0x75/0x80 [ 95.890755] do_syscall_64+0xc4/0x1b0 [\n95.890755] entry_SYSCALL_64_after_hwframe+0x67/0x6f [ 95.890755] [\n95.890755] Freed by task 506: [ 95.890755] kasan_save_track+0x3f/0x70 [\n95.890755] kasan_save_free_info+0x40/0x50 [ 95.890755\npoison_slab_object+0x118/0x180 [ 95.890755] __kasan_slab_free+0x12/0x30 [\n95.890755] kfree+0xb2/0x240 [ 95.890755] __sk_destruct+0x317/0x410 [\n95.890755] sco_sock_release+0x232/0x280 [ 95.890755] sock_close+0xb2/0x210\n[ 95.890755] __fput+0x37f/0x770 [ 95.890755] task_work_run+0x1ae/0x210 [\n95.890755] get_signal+0xe17/0xf70 [ 95.890755\narch_do_signal_or_restart+0x3f/0x520 [ 95.890755\nsyscall_exit_to_user_mode+0x55/0x120 [ 95.890755] do_syscall_64+0xd1/0x1b0\n[ 95.890755] entry_SYSCALL_64_after_hwframe+0x67/0x6f [ 95.890755] [\n95.890755] The buggy address belongs to the object at ffff88800c388000 [\n95.890755] which belongs to the cache kmalloc-1k of size 1024 [ 95.890755\nThe buggy address is located 128 bytes inside of [ 95.890755] freed\n1024-byte region [ffff88800c388000, ffff88800c388400) [ 95.890755] [\n95.890755] The buggy address belongs to the physical page: [ 95.890755\npage: refcount:1 mapcount:0 mapping:0000000000000000\nindex:0xffff88800c38a800 pfn:0xc388 [ 95.890755] head: order:3\nentire_mapcount:0 nr_pages_mapped:0 pincount:0 [ 95.890755] ano\n---truncated---)(CVE-2024-27398)\n\nIn the Linux kernel, the following vulnerability has been\nresolved: watchdog: cpu5wdt.c: Fix use-after-free bug caused by\ncpu5wdt_trigger When the cpu5wdt module is removing, the origin code uses\ndel_timer() to de-activate the timer. If the timer handler is running,\ndel_timer() could not stop it and will return directly. If the port region\nis released by release_region() and then the timer handler\ncpu5wdt_trigger() calls outb() to write into the region that is released,\nthe use-after-free bug will happen. Change del_timer() to\ntimer_shutdown_sync() in order that the timer handler could be finished\nbefore the port region is released.)(CVE-2024-38630)",
  "id": "LSN-0107-1",
  "isummary": "Several security issues were fixed in the kernel.",
  "releases": {
    "bionic": {
      "sources": {
        "aws": {
          "version": "4.15.0-1159",
          "description": "Linux kernel for Amazon Web Services (AWS) systems"
        },
        "azure-4.15": {
          "version": "4.15.0-1168",
          "description": "Linux kernel for Microsoft Azure Cloud systems"
        },
        "gcp-4.15": {
          "version": "4.15.0-1154",
          "description": "Linux kernel for Google Cloud Platform (GCP) systems"
        },
        "generic-4.15": {
          "version": "4.15.0-214",
          "description": "Linux kernel"
        },
        "lowlatency-4.15": {
          "version": "4.15.0-214",
          "description": "Linux kernel"
        },
        "generic-5.4": {
          "version": "5.4.0-150",
          "description": "Linux hardware enablement (HWE) kernel"
        },
        "lowlatency-5.4": {
          "version": "5.4.0-150",
          "description": "Linux hardware enablement (HWE) kernel"
        },
        "oracle": {
          "version": "4.15.0-1129",
          "description": "Linux kernel for Oracle Cloud systems"
        }
      },
      "binaries": {},
      "allbinaries": {
        "aws": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_15_0[_|\\d]+_aws_(\\d+)",
          "version": "107"
        },
        "azure-4.15": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_15_0[_|\\d]+_azure_(\\d+)",
          "version": "107"
        },
        "gcp-4.15": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_15_0[_|\\d]+_gcp_(\\d+)",
          "version": "107"
        },
        "generic-4.15": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_15_0[_|\\d]+_generic_(\\d+)",
          "version": "107"
        },
        "lowlatency-4.15": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_15_0[_|\\d]+_lowlatency_(\\d+)",
          "version": "107"
        },
        "generic-5.4": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_4_0[_|\\d]+_generic_(\\d+)",
          "version": "107"
        },
        "lowlatency-5.4": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_4_0[_|\\d]+_lowlatency_(\\d+)",
          "version": "107"
        },
        "oracle": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_15_0[_|\\d]+_oracle_(\\d+)",
          "version": "107"
        }
      }
    },
    "focal": {
      "sources": {
        "aws-5.15": {
          "version": "5.15.0-1000",
          "description": "Linux kernel for Amazon Web Services (AWS) systems"
        },
        "aws": {
          "version": "5.4.0-1061",
          "description": "Linux kernel for Amazon Web Services (AWS) systems"
        },
        "azure-5.15": {
          "version": "5.15.0-1069",
          "description": "Linux kernel for Microsoft Azure cloud systems"
        },
        "azure": {
          "version": "5.4.0-1010",
          "description": "Linux kernel for Microsoft Azure Cloud systems"
        },
        "gcp-5.15": {
          "version": "5.15.0-1000",
          "description": "Linux kernel for Google Cloud Platform (GCP) systems"
        },
        "gcp": {
          "version": "5.4.0-1009",
          "description": "Linux kernel for Google Cloud Platform (GCP) systems"
        },
        "generic-5.15": {
          "version": "5.15.0-0",
          "description": "Linux hardware enablement (HWE) kernel"
        },
        "lowlatency-5.15": {
          "version": "5.15.0-0",
          "description": "Linux hardware enablement (HWE) kernel"
        },
        "generic-5.4": {
          "version": "5.4.0-26",
          "description": "Linux kernel"
        },
        "lowlatency-5.4": {
          "version": "5.4.0-26",
          "description": "Linux kernel"
        },
        "gke-5.15": {
          "version": "5.15.0-1000",
          "description": "Linux kernel for Google Container Engine (GKE) systems"
        },
        "gke": {
          "version": "5.4.0-1033",
          "description": "Linux kernel for Google Container Engine (GKE) systems"
        },
        "gkeop": {
          "version": "5.4.0-1009",
          "description": "Linux kernel for Google Container Engine (GKE) systems"
        },
        "ibm-5.15": {
          "version": "5.15.0-1000",
          "description": "Linux kernel for IBM cloud systems"
        },
        "ibm": {
          "version": "5.4.0-1009",
          "description": "Linux kernel for IBM cloud systems"
        },
        "oracle-5.15": {
          "version": "5.15.0-1055",
          "description": "Linux kernel for Oracle Cloud systems"
        },
        "oracle": {
          "version": "5.4.0-1121",
          "description": "Linux kernel for Oracle Cloud systems"
        }
      },
      "binaries": {},
      "allbinaries": {
        "aws-5.15": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_aws_(\\d+)",
          "version": "107"
        },
        "aws": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_4_0[_|\\d]+_aws_(\\d+)",
          "version": "107"
        },
        "azure-5.15": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_azure_(\\d+)",
          "version": "107"
        },
        "azure": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_4_0[_|\\d]+_azure_(\\d+)",
          "version": "107"
        },
        "gcp-5.15": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_gcp_(\\d+)",
          "version": "107"
        },
        "gcp": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_4_0[_|\\d]+_gcp_(\\d+)",
          "version": "107"
        },
        "generic-5.15": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_generic_(\\d+)",
          "version": "107"
        },
        "lowlatency-5.15": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_lowlatency_(\\d+)",
          "version": "107"
        },
        "generic-5.4": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_4_0[_|\\d]+_generic_(\\d+)",
          "version": "107"
        },
        "lowlatency-5.4": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_4_0[_|\\d]+_lowlatency_(\\d+)",
          "version": "107"
        },
        "gke-5.15": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_gke_(\\d+)",
          "version": "107"
        },
        "gke": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_4_0[_|\\d]+_gke_(\\d+)",
          "version": "107"
        },
        "gkeop": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_4_0[_|\\d]+_gkeop_(\\d+)",
          "version": "107"
        },
        "ibm-5.15": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_ibm_(\\d+)",
          "version": "107"
        },
        "ibm": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_4_0[_|\\d]+_ibm_(\\d+)",
          "version": "107"
        },
        "oracle-5.15": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_oracle_(\\d+)",
          "version": "107"
        },
        "oracle": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_4_0[_|\\d]+_oracle_(\\d+)",
          "version": "107"
        }
      }
    },
    "jammy": {
      "sources": {
        "aws": {
          "version": "5.15.0-1000",
          "description": "Linux kernel for Amazon Web Services (AWS) systems"
        },
        "azure": {
          "version": "5.15.0-1000",
          "description": "Linux kernel for Microsoft Azure Cloud systems"
        },
        "gcp": {
          "version": "5.15.0-1000",
          "description": "Linux kernel for Google Cloud Platform (GCP) systems"
        },
        "linux": {
          "version": "5.15.0-24",
          "description": "Linux kernel"
        },
        "gke": {
          "version": "5.15.0-1000",
          "description": "Linux kernel for Google Container Engine (GKE) systems"
        },
        "ibm": {
          "version": "5.15.0-1000",
          "description": "Linux kernel for IBM cloud systems"
        },
        "oracle": {
          "version": "5.15.0-1055",
          "description": "Linux kernel for Oracle Cloud systems"
        }
      },
      "binaries": {},
      "allbinaries": {
        "aws": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_aws_(\\d+)",
          "version": "107"
        },
        "azure": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_azure_(\\d+)",
          "version": "107"
        },
        "gcp": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_gcp_(\\d+)",
          "version": "107"
        },
        "linux": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_linux_(\\d+)",
          "version": "107"
        },
        "gke": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_gke_(\\d+)",
          "version": "107"
        },
        "ibm": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_ibm_(\\d+)",
          "version": "107"
        },
        "oracle": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_5_15_0[_|\\d]+_oracle_(\\d+)",
          "version": "107"
        }
      }
    },
    "noble": {
      "sources": {
        "aws": {
          "version": "6.8.0-1008",
          "description": "Linux kernel for Amazon Web Services (AWS) systems"
        },
        "azure": {
          "version": "6.8.0-1007",
          "description": "Linux kernel for Microsoft Azure Cloud systems"
        },
        "gcp": {
          "version": "6.8.0-1007",
          "description": "Linux kernel for Google Cloud Platform (GCP) systems"
        },
        "linux": {
          "version": "6.8.0-1",
          "description": "Linux kernel"
        },
        "ibm": {
          "version": "6.8.0-1005",
          "description": "Linux kernel for IBM cloud systems"
        }
      },
      "binaries": {},
      "allbinaries": {
        "aws": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_6_8_0[_|\\d]+_aws_(\\d+)",
          "version": "107"
        },
        "azure": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_6_8_0[_|\\d]+_azure_(\\d+)",
          "version": "107"
        },
        "gcp": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_6_8_0[_|\\d]+_gcp_(\\d+)",
          "version": "107"
        },
        "linux": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_6_8_0[_|\\d]+_linux_(\\d+)",
          "version": "107"
        },
        "ibm": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_6_8_0[_|\\d]+_ibm_(\\d+)",
          "version": "107"
        }
      }
    },
    "trusty": {
      "sources": {
        "generic-4.4": {
          "version": "4.4.0-168",
          "description": "Linux hardware enablement kernel from Xenial for Trusty"
        },
        "lowlatency-4.4": {
          "version": "4.4.0-168",
          "description": "Linux hardware enablement kernel from Xenial for Trusty"
        }
      },
      "binaries": {},
      "allbinaries": {
        "generic-4.4": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_4_0[_|\\d]+_generic_(\\d+)",
          "version": "107"
        },
        "lowlatency-4.4": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_4_0[_|\\d]+_lowlatency_(\\d+)",
          "version": "107"
        }
      }
    },
    "xenial": {
      "sources": {
        "aws-hwe": {
          "version": "4.15.0-1126",
          "description": "Linux kernel for Amazon Web Services (AWS-HWE) systems"
        },
        "aws": {
          "version": "4.4.0-1159",
          "description": "Linux kernel for Amazon Web Services (AWS) systems"
        },
        "azure": {
          "version": "4.15.0-1114",
          "description": "Linux kernel for Microsoft Azure Cloud systems"
        },
        "gcp": {
          "version": "4.15.0-1118",
          "description": "Linux kernel for Google Cloud Platform (GCP) systems"
        },
        "generic-4.15": {
          "version": "4.15.0-143",
          "description": "Linux hardware enablement (HWE) kernel"
        },
        "lowlatency-4.15": {
          "version": "4.15.0-143",
          "description": "Linux hardware enablement (HWE) kernel"
        },
        "generic-4.4": {
          "version": "4.4.0-243",
          "description": "Linux kernel"
        },
        "lowlatency-4.4": {
          "version": "4.4.0-243",
          "description": "Linux kernel"
        }
      },
      "binaries": {},
      "allbinaries": {
        "aws-hwe": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_15_0[_|\\d]+_aws_(\\d+)",
          "version": "107"
        },
        "aws": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_4_0[_|\\d]+_aws_(\\d+)",
          "version": "107"
        },
        "azure": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_15_0[_|\\d]+_azure_(\\d+)",
          "version": "107"
        },
        "gcp": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_15_0[_|\\d]+_gcp_(\\d+)",
          "version": "107"
        },
        "generic-4.15": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_15_0[_|\\d]+_generic_(\\d+)",
          "version": "107"
        },
        "lowlatency-4.15": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_15_0[_|\\d]+_lowlatency_(\\d+)",
          "version": "107"
        },
        "generic-4.4": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_4_0[_|\\d]+_generic_(\\d+)",
          "version": "107"
        },
        "lowlatency-4.4": {
          "pocket": "livepatch",
          "module": "lkp_Ubuntu_4_4_0[_|\\d]+_lowlatency_(\\d+)",
          "version": "107"
        }
      }
    }
  },
  "summary": "Kernel Live Patch Security Notice",
  "timestamp": 1730798370.0,
  "title": "Kernel Live Patch Security Notice"
}