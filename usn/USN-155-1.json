{
  "description": "Secunia.com reported that one of the recent security patches in\nFirefox reintroduced the frame injection patch that was originally\nknown as CAN-2004-0718. This allowed a malicious web site to spoof the\ncontents of other web sites. (CAN-2005-1937)\n\nIt was discovered that a malicious website could inject arbitrary\nscripts into a target site by loading it into a frame and navigating\nback to a previous Javascript URL that contained an eval() call. This\ncould be used to steal cookies or other confidential data from the\ntarget site. (MFSA 2005-42)\n\nMichael Krax, Georgi Guninski, and L. David Baron found that the\nsecurity checks that prevent script injection could be bypassed by\nwrapping a javascript: url in another pseudo-protocol like\n\"view-source:\" or \"jar:\". (CAN-2005-1531)\n\nA variant of the attack described in CAN-2005-1160 (see USN-124-1) was\ndiscovered. Additional checks were added to make sure Javascript eval\nand script objects are run with the privileges of the context that\ncreated them, not the potentially elevated privilege of the context\ncalling them. (CAN-2005-1532)\n\nIn several places the browser user interface did not correctly\ndistinguish between true user events, such as mouse clicks or\nkeystrokes, and synthetic events genenerated by web content. This\ncould be exploited by malicious web sites to generate e. g. mouse clicks\nthat install malicious plugins. Synthetic events are now prevented\nfrom reaching the browser UI entirely. (CAN-2005-2260)\n\nScripts in XBL controls from web content continued to be run even when\nJavascript was disabled. This could be combined with most script-based\nexploits to attack people running vulnerable versions who thought\ndisabling Javascript would protect them. (CAN-2005-2261)\n\nMatthew Mastracci discovered a flaw in the addons installation\nlauncher. By forcing a page navigation immediately after calling the\ninstall method a callback function could end up running in the context\nof the new page selected by the attacker. This callback script could\nsteal data from the new page such as cookies or passwords, or perform\nactions on the user's behalf such as make a purchase if the user is\nalready logged into the target site. However, the default settings\nallow only http://addons.mozilla.org to bring up this install dialog.\nThis could only be exploited if users have added untrustworthy sites\nto the installation allowlist, and if a malicious site can convince\nyou to install from their site. (CAN-2005-2263)\n\nThe function for version comparison in the addons installer did not\nproperly verify the type of its argument. By passing specially crafted\nJavascript objects to it, a malicious web site could crash the browser\nand possibly even execute arbitrary code with the privilege of the\nuser account Firefox runs in. (CAN-2005-2265)\n\nA child frame can call top.focus() even if the framing page comes from\na different origin and has overridden the focus() routine. Andreas\nSandblad discovered that the call is made in the context of the child\nframe. This could be exploited to steal cookies and passwords from the\nframed page, or take actions on behalf of a signed-in user. However,\nweb sites with above properties are not very common. (CAN-2005-2266)\n\nAlerts and prompts created by scripts in web pages were presented with\nthe generic title [Javascript Application] which sometimes made it\ndifficult to know which site created them. A malicious page could\nexploit this by causing a prompt to appear in front of a trusted site\nin an attempt to extract information such as passwords from the user.\nIn the fixed version these prompts contain the hostname of the page\nwhich created it. (CAN-2005-2268)\n\nThe XHTML DOM node handler did not take namespaces into account when\nverifying node types based on their names. For example, an XHTML\ndocument could contain an <IMG> tag with malicious contents, which\nwould then be processed as the standard trusted HTML <img> tag. By\ntricking an user to view malicious web sites, this could be exploited\nto execute attacker-specified code with the full privileges of the\nuser. (CAN-2005-2269)\n\nIt was discovered that some objects were not created appropriately.\nThis allowed malicious web content scripts to trace back the creation\nchain until they found a privileged object and execute code with\nhigher privileges than allowed by the current site. (CAN-2005-2270)\n\nThe update for Ubuntu 4.10 (Warty Warthog) also fixes several\nvulnerabilities which are not present in the Ubuntu 5.04 version. Some\nof them could be exploited to execute arbitrary code with full user\nprivileges if the user visited a malicious web site. (MFSA-2005-01 to\nMFSA-2005-41; please see the following web site for details:\nhttp://www.mozilla.org/projects/security/known-vulnerabilities.html). We\napologize for the huge delay of this update; we changed our update\nstrategy for Mozilla products to make sure that such long delays will\nnot happen again.",
  "releases": {
    "hoary": {
      "binaries": {
        "mozilla-mailnews": {
          "version": ""
        },
        "mozilla-browser": {
          "version": ""
        }
      }
    },
    "warty": {
      "binaries": {
        "mozilla-mailnews": {
          "version": ""
        },
        "mozilla-browser": {
          "version": ""
        }
      }
    }
  },
  "title": "Mozilla vulnerabilities",
  "timestamp": 1122438866,
  "summary": "mozilla vulnerabilities",
  "id": "USN-155-1",
  "cves": [
    "CVE-2005-1531",
    "CVE-2005-1532",
    "CVE-2005-1937",
    "CVE-2005-2260",
    "CVE-2005-2261",
    "CVE-2005-2263",
    "CVE-2005-2265",
    "CVE-2005-2266",
    "CVE-2005-2268",
    "CVE-2005-2269",
    "CVE-2005-2270"
  ]
}
